@startuml

class PathArguments {
+args
+__init__()
}
PathArguments --|> argparse.ArgumentParser

class PathOperation {
EXTENSIONS
TOOLS
DOCKERFILE
VAGRANTFILE
WELCOME_MESSAGE
VM_NAME
HIDDEN_FILES
SPECIAL_FILES
DOCKER_RM
VAGRANT_RM
+input_files : list[Path]
+input_directories : list[Path]
#_directories : set
+cwd : Path
#_is_logging_enabled : bool
#_path_components -> path_components
#_images -> images
#_logging -> logging
#_filters -> filters
#_custom_configuration : Path

+__init__(command_line_args=None)
+path_components() -> _path_components
+logging() -> _is_logging_enabled
+custom_configuration() -> _custom_configuration
+filters() -> _filters
#_categorize_files_input()
+resolve_containers()
+show_filters()
+add_filter()
+load_filters()
+add_configuration()
+create_configuration_files()
+list_analysed_files(path)
+write_specific_package_file(command, path,
tools)
+write_configuration(configuration)
+delete_configurations()
+delete_result_directory()
+destroy_images(tags)
+destroy_boxes()
+destroy_everyting(tags)
}

PathOperation --> PathArguments

' End of path operation package
newpage

interface AbstractProfile {
+{abstract}create_profile()
+{abstract}parse_profile()
}


class SimpleSeccompProfile {
+^create_profile()
+^parse_profile()
}

class CustomizedSeccompProfile {
+^create_profile()
+^parse_profile()
}

class SimpleApparmorProfile {
+^create_profile()
+^parse_profile()
}

class CustomizedApparmorProfile {
+^create_profile()
+^parse_profile()
}

SimpleSeccompProfile ..|> AbstractProfile
CustomizedSeccompProfile ..|> AbstractProfile
SimpleApparmorProfile ..|> AbstractProfile
CustomizedApparmorProfile ..|> AbstractProfile

newpage

abstract class AbstractDockerImageFactory {
APK
APTGET
DNF
YUM
BREW
COMPOSER
GEM
GRADLE
NPM
PIP
STACK
#_image
#_package_manager
+{abstract}__init__(cls_object)
+image() -> _image
+package_manager() -> _package_manager
#_set_package_manager()
+{abstract}create_image(image, allowed_os, version)
+{abstract}create_seccomp_profile()
+{abstract}create_mac_profile()
+{abstract}unix_setup()
}

class ApparmorDockerImageFactory {
SECCOMP
MAC
+^create_image(operation_system,
allowed_os, version=None)
+^create_seccomp_profile()
+^create_mac_profile()
+^unix_setup()
}

class CustomDockerImageFactory {
SECCOMP
MAC
+^create_image(operation_system,
               allowed_os, version=None)
+^create_seccomp_profile()
+^create_mac_profile()
+^unix_setup()
}

interface AbstractProfile

ApparmorDockerImageFactory --|> AbstractDockerImageFactory
CustomDockerImageFactory --|> AbstractDockerImageFactory
AbstractDockerImageFactory --> DirectoryToImageAndTools
AbstractDockerImageFactory ..> AbstractProfile

enum DirectoryToImageAndTools {
CL
CPP
CS
GO
HASKELL
JAVA
JAVASCRIPT
KOTLIN
LUA
OCAML
OPENCL
PHP
PROLOG
PYTHON
RL
RUBY
RUST
SCALA
SMALLTALK
SQL
}

newpage


abstract class AbstractToolset {
RUN
COPY
INSTALL
UPDATE
RECOMMENDS
APT_GET_CLEAN_REGISTRY
APK_CLEAN_REGISTRY
NPM
#_package_manager
#_program_program_package_installer
#_os_tools
#_specific_tools
#_other_commands
+first_tool
+{abstract} __init__(package_manager, program_package_installer, os_tools,
specific_tools, other_commands)
-__add__(other)
-__iter__()
-__next__()
+specific_tools()
+{abstract} specify_tools(tools)
#_update_packages()
#_clean_registry()
#_add_specific_tools()
#_add_other_commands()
+{abstract} install() -> CommandBuilder
}

' Here starts general tools
class GeneralToolset {
}

class CommandBuilder {
#_commands -> str
+__init__(*args)
-__add__(other) -> CommandBuilder
-__str__() -> str
}

GeneralToolset --|> AbstractToolset
AbstractToolset --> CommandBuilder

newpage
' End of Abstract profile along with docker image factory
abstract class AbstractDockerImageFactory

class CommandBuilder {
#_commands -> str
+__init__(*args)
-__add__(other) -> CommandBuilder
-__str__() -> str
}


abstract class AbstractDockerSecurity {
CPP = 'C++'
CS = 'C#'
+enum_directory
+image
+os_tools
+specific_tools
+other_commands
+docker_workdir
+{abstract} __init__()
+convert_directory_to_image(programming_language)
+{abstract} create_image_factory(programming_language)
+{abstract} create_toolset(package_manager, program_package_installer=None,
os_tools=None, specific_tools=None, other_commands=None)
}

class SimpleSecurity {
ALLOWED_OS
PHP
PHP_VERSION
+^create_image_factory(programming_language)
+^create_toolset(package_manager, program_package_installer,
os_tools, specific_tools, other_commands)
}
class CustomizedSecurity {
ALLOWED_OS
+^create_image_factory(programming_language)
+^create_toolset(package_manager, program_package_installer,
os_tools, specific_tools, other_commands)
}

class ResultRetriever {
DOCKER_CP
BRIDGE
DOCKER_DISCONNECT
VAGRANT_SSH
VAGRANT_SCP
RESULT_FILE
SUFFIXES
#_config_creator
+security_results
+portability_results
+highlighter
+__init__(result_highlighter)
#_exec_cmd(cmd, input_cmds, **kwargs),
#_docker_disconnect(programming_language)
+retrieve_docker(path, programming_language)
+retrieve_vagrant(path)
+retrieve()
+perform_filter()
}

class ResultHighlighter {
+user_function -> function
+args -> list
+kwargs -> dict
#_config(*args, **kwargs)
#_highlight(*args, **kwargs)
+highlight()
}

ResultRetriever --> ResultHighlighter


SimpleSecurity --|> AbstractDockerSecurity
CustomizedSecurity --|> AbstractDockerSecurity

class VirtualStarter {
DOCKER_BUILD
DOCKER_CREATE
DOCKER_PRUNE
VAGRANT_BOXES
VAGRANT_DESTROY
VBOXMANAGE_LISTVM
VBOXMANAGE_CONTROLVM
VBOXMANAGE_UNREGISTERVM
#_processes
+directories
+tags
+async log_output(process)
+async create_containers(path, tag)
+async create_box(path)
+async deploy()
+kill_processes()
+prune()
+vagrant_destroy()
}

class ConfigCreator {
LOW
HIGH
POSIX
WINDOWS
+path_components
+images_enum
+docker_conf
+base_image
+image_factory
+profiles
+toolset

+__init__(directories,
image, security_level)
+unroll_path()
+create_configuration()
}
AbstractDockerSecurity ..> AbstractDockerImageFactory
AbstractDockerSecurity ..> AbstractToolset
ConfigCreator ..> AbstractDockerSecurity
ConfigCreator --> PathOperation
ConfigCreator --> CommandBuilder

class RunFacade {
#_path_subsystem -> PathOperation
#_config_subsystem -> ConfigCreator
#_run_subsystem -> VirtualStarter
#_result_subsystem -> ResultRetriever
+async docker_operation()
+async vagrant_operation()
+operation()
+list_filters()
+kill_processes()
+delete_configurations()
}

RunFacade --* ConfigCreator
RunFacade --* PathOperation
RunFacade --* VirtualStarter
RunFacade --* ResultRetriever


@enduml